*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="ribbon.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS applicationbutton AS cnthottracking OF "ribbon.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgApplication" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: showapplicationimage
	*</DefinedPropArrayMethod>

	Height = 42
	Name = "applicationbutton"
	Width = 42
	shpmousehandler.Height = 42
	shpmousehandler.Name = "shpmousehandler"
	shpmousehandler.Width = 42
	shpmousehandler.ZOrderSet = 1

	ADD OBJECT 'imgApplication' AS image WITH ;
		BackStyle = 0, ;
		Height = 32, ;
		Left = 5, ;
		Name = "imgApplication", ;
		Stretch = 1, ;
		Top = 5, ;
		Width = 32, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE changetheme
		With _Screen.ThemesManager
		   *This.PictureDisabled = .GetMember("ApplicationButton.Disabled.Picture")
		   This.PictureHover = .GetMember("ApplicationButton.Hover.Picture")
		   This.PictureNormal = .GetMember("ApplicationButton.Normal.Picture")
		   This.PicturePressed = .GetMember("ApplicationButton.Pressed.Picture")
		   DoDefault()
		Endwith
	ENDPROC

	PROCEDURE Init
		This.ZOrder(0)
		DoDefault()
		This.ShowApplicationImage()
	ENDPROC

	PROCEDURE setstatus
		Lparameters lcEvent
		DoDefault(lcEvent)
		This.ShowApplicationImage()
	ENDPROC

	HIDDEN PROCEDURE showapplicationimage
		Local llVisible
		With This.imgApplication
			If Not Empty(.Picture) Or ;
					Not Empty(.PictureVal)
				m.llVisible = .T.
			Endif
			.Visible = m.llVisible
		Endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS cntform AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpBackground" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgBackgroundRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgBackgroundMiddle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgBackgroundLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntMinimize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntClose" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntMaximize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblTitle" UniqueID="" Timestamp="" />

	#INCLUDE "themedcontrols.h"
	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: initthemedcontrol
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Anchor = 15
	BackStyle = 0
	BorderWidth = 0
	Height = 450
	Name = "cntform"
	TabStop = .F.
	Width = 691
	_memberdata = <VFPData>
		<memberdata name="initthemedcontrols" type="method" display="InitThemedControls"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cntClose' AS cnthottracking WITH ;
		Anchor = 8, ;
		BackStyle = 1, ;
		Height = 25, ;
		Left = 662, ;
		Name = "cntClose", ;
		Top = 4, ;
		Width = 25, ;
		shpmousehandler.Height = 22, ;
		shpmousehandler.Name = "shpmousehandler", ;
		shpmousehandler.Width = 32
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'cntMaximize' AS cntrestore WITH ;
		Anchor = 8, ;
		Left = 637, ;
		Name = "cntMaximize", ;
		Top = 4, ;
		shpmousehandler.Name = "shpmousehandler"
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'cntMinimize' AS cnthottracking WITH ;
		Anchor = 8, ;
		BackStyle = 1, ;
		Height = 25, ;
		Left = 612, ;
		Name = "cntMinimize", ;
		Top = 4, ;
		Width = 25, ;
		shpmousehandler.Height = 22, ;
		shpmousehandler.Name = "shpmousehandler", ;
		shpmousehandler.Width = 32
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'imgBackgroundLeft' AS image WITH ;
		Anchor = 3, ;
		BackStyle = 0, ;
		Height = 31, ;
		Name = "imgBackgroundLeft", ;
		Top = 0, ;
		Width = 5
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgBackgroundMiddle' AS image WITH ;
		Anchor = 11, ;
		BackStyle = 0, ;
		Height = 31, ;
		Left = 5, ;
		Name = "imgBackgroundMiddle", ;
		Stretch = 2, ;
		Top = 0, ;
		Width = 681
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgBackgroundRight' AS image WITH ;
		Anchor = 9, ;
		BackStyle = 0, ;
		Height = 31, ;
		Left = 686, ;
		Name = "imgBackgroundRight", ;
		Top = 0, ;
		Width = 5
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblTitle' AS label WITH ;
		Anchor = 10, ;
		BackStyle = 0, ;
		Caption = "Caption", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 14, ;
		Name = "lblTitle", ;
		Top = 9, ;
		Width = 593
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'shpBackground' AS shape WITH ;
		Anchor = 15, ;
		Height = 420, ;
		Left = 0, ;
		Name = "shpBackground", ;
		Top = 30, ;
		Width = 691
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE changetheme
		With _Screen.ThemesManager
		   This.imgBackgroundLeft.Picture = .GetMember("TitleBar.Left.Picture")
		   This.imgBackgroundMiddle.Picture = .GetMember("TitleBar.Middle.Picture")
		   This.imgBackgroundRight.Picture = .GetMember("TitleBar.Right.Picture")
		   This.shpBackground.BackColor = .GetMember("TitleBar.BackColor")
		   This.shpBackground.BorderColor = .GetMember("TitleBar.BorderColor")
		   This.lblTitle.ForeColor = .GetMember("TitleBar.FontColor")
		Endwith
	ENDPROC

	PROCEDURE Init
		This.InitThemedControl()
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		If nButton = 1 && LMB
		   apiReleaseCapture()
		   apiSendMessage(Thisform.HWnd, WM_SYSCOMMAND, MOUSE_MOVE, 0x0) && Initiate Window Move
		   apiSendMessage(Thisform.HWnd, WM_LBUTTONUP, 0x0, 0x0) && Complete left click by sending 'left button up' message
		Endif
	ENDPROC

	PROCEDURE cntClose.changetheme
		With _Screen.ThemesManager
		   *This.PictureDisabled = .GetMember("Close.Disabled.Picture")
		   This.PictureHover = .GetMember("Close.Hover.Picture")
		   This.PictureNormal = .GetMember("Close.Normal.Picture")
		   This.PicturePressed = .GetMember("Close.Pressed.Picture")
		   DoDefault()
		Endwith
	ENDPROC

	PROCEDURE cntClose.Click
		Thisform.Release()
	ENDPROC

	PROCEDURE cntMinimize.changetheme
		With _Screen.ThemesManager
		   *This.PictureDisabled = .GetMember("Minimize.Disabled.Picture")
		   This.PictureHover = .GetMember("Minimize.Hover.Picture")
		   This.PictureNormal = .GetMember("Minimize.Normal.Picture")
		   This.PicturePressed = .GetMember("Minimize.Pressed.Picture")
		   DoDefault()
		Endwith
	ENDPROC

	PROCEDURE cntMinimize.Click
		Thisform.WindowState = 1
	ENDPROC

	PROCEDURE imgBackgroundLeft.DblClick
		*This.Parent.cntMaximize.ChangeWindowState()
	ENDPROC

	PROCEDURE imgBackgroundLeft.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBackgroundMiddle.DblClick
		*This.Parent.cntMaximize.ChangeWindowState()
	ENDPROC

	PROCEDURE imgBackgroundMiddle.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE imgBackgroundRight.DblClick
		*This.Parent.cntMaximize.ChangeWindowState()
	ENDPROC

	PROCEDURE imgBackgroundRight.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

	PROCEDURE lblTitle.DblClick
		*This.Parent.cntMaximize.ChangeWindowState()
	ENDPROC

	PROCEDURE lblTitle.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.MouseDown(nButton, nShift, nXCoord, nYCoord)
	ENDPROC

ENDDEFINE

DEFINE CLASS cnthottracking AS cntmousehandler OF "ribbon.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpMouseHandler" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: createadditionalcontrols
		*m: enabled_assign
		*m: initthemedcontrol
		*p: initialized
		*p: picturedisabled
		*p: picturehover
		*p: picturenormal
		*p: picturepressed
	*</DefinedPropArrayMethod>

	Height = 24
	initialized = .F.
	Name = "cnthottracking"
	picturedisabled = ("")
	picturehover = ("")
	picturenormal = ("")
	picturepressed = ("")
	Width = 24
	_memberdata = <VFPData>
		<memberdata name="createadditionalcontrols" type="method" display="CreateAdditionalControls"/>
		<memberdata name="enabled_assign" type="method" display="Enabled_Assign"/>
		<memberdata name="picturedisabled" type="property" display="PictureDisabled"/>
		<memberdata name="picturehover" type="property" display="PictureHover"/>
		<memberdata name="picturenormal" type="property" display="PictureNormal"/>
		<memberdata name="picturepressed" type="property" display="PicturePressed"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		<memberdata name="initialized" type="property" display="Initialized"/>
		</VFPData>

	ADD OBJECT 'shpMouseHandler' AS shpmousehandler WITH ;
		Anchor = 15, ;
		Height = 24, ;
		Name = "shpMouseHandler", ;
		Width = 24
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="shape" />
	
	PROCEDURE changetheme
		With This
		   If .Initialized
		      Local lnState, lcState, loImage
		      For lnState=1 To 4
		         lcState = Icase(lnState==1,"Normal",lnState==2,"Hover",lnState==3,"Pressed","Disabled")
		         loImage = Evaluate("This."+"img"+lcState)
		         loImage.Picture = Evaluate("This.Picture"+lcState)
		         loImage = Null
		      Endfor
		   Endif
		Endwith
	ENDPROC

	PROCEDURE createadditionalcontrols
		Local lnState, lcState, loImage
		With This
		   For lnState=1 To 4
		      lcState = Icase(lnState==1,"Normal",lnState==2,"Hover",lnState==3,"Pressed","Disabled")
		      .AddObject("img"+lcState,"Image")
		      loImage = Evaluate("This."+"img"+lcState)
		      With loImage
		         .BackStyle = 0
		         .Height = This.Height
		         .Picture = Evaluate("This.Picture"+lcState)
		         .Width = This.Width
		         .ZOrder(1)
		         If lnState==1
		            .Visible = .T.
		         Endif
		      Endwith
		      loImage = Null
		   Endfor
		Endwith
	ENDPROC

	HIDDEN PROCEDURE enabled_assign
		Lparameters vNewVal
		This.Enabled = m.vNewVal
		This.SetStatus("")
	ENDPROC

	PROCEDURE Init
		This.InitThemedControl()
		This.CreateAdditionalControls()
		This.Initialized = .T.
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE setstatus
		Lparameters lcEvent
		This.SetAll("Visible",.F.,"Image")
		If This.Enabled
		   Do Case
		      Case m.lcEvent=="C" && Click
		         This.SetStatus("D")
		         This.Click()
		         This.SetStatus("U")
		      Case m.lcEvent=="D" && MouseDown
		         This.imgPressed.Visible = .T.
		      Case m.lcEvent=="E" && MouseEnter
		         This.imgHover.Visible = .T.
		      Otherwise
		         * MouseLeave and MouseUp
		         This.imgNormal.Visible = .T.
		   Endcase
		Else
		   This.imgDisabled.Visible = .T.
		Endif
	ENDPROC

ENDDEFINE

DEFINE CLASS cntmousehandler AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: setstatus
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 200
	Name = "cntmousehandler"
	TabStop = .F.
	Width = 200
	_memberdata = <VFPData>
		<memberdata name="setstatus" type="method" display="SetStatus"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		DoDefault(nButton, nShift, nXCoord, nYCoord)
		This.SetStatus("D")
	ENDPROC

	PROCEDURE MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		DoDefault(nButton, nShift, nXCoord, nYCoord)
		This.SetStatus("E")
	ENDPROC

	PROCEDURE MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		DoDefault(nButton, nShift, nXCoord, nYCoord)
		This.SetStatus("L")
	ENDPROC

	PROCEDURE MouseUp
		Lparameters nButton, nShift, nXCoord, nYCoord
		DoDefault(nButton, nShift, nXCoord, nYCoord)
		This.SetStatus("U")
	ENDPROC

	PROCEDURE setstatus
		Lparameters lcEvent
		Do Case
		   Case m.lcEvent=="D" && MouseDown
		   Case m.lcEvent=="E" && MouseEnter
		   Case m.lcEvent=="L" && MouseLeave
		   Case m.lcEvent=="U" && MouseUp
		   Otherwise
		Endcase
	ENDPROC

ENDDEFINE

DEFINE CLASS cntrestore AS cnthottracking OF "ribbon.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: changewindowstate
		*m: windowstate_assign
		*p: picturedisabledrestore
		*p: picturehoverrestore
		*p: picturenormalrestore
		*p: picturepressedrestore
		*p: windowstate		&& Specifies if a Form window is minimized or maximized at run time.
	*</DefinedPropArrayMethod>

	BackStyle = 1
	Height = 25
	Name = "cntrestore"
	picturedisabledrestore = ("")
	picturehoverrestore = ("")
	picturenormalrestore = ("")
	picturepressedrestore = ("")
	Width = 25
	windowstate = 0		&& Specifies if a Form window is minimized or maximized at run time.
	_memberdata = <VFPData>
		<memberdata name="windowstate" type="property" display="WindowState"/>
		<memberdata name="windowstate_assign" type="method" display="WindowState_Assign"/>
		<memberdata name="picturedisabledrestore" type="property" display="PictureDisabledRestore"/>
		<memberdata name="picturehoverrestore" type="property" display="PictureHoverRestore"/>
		<memberdata name="picturenormalrestore" type="property" display="PictureNormalRestore"/>
		<memberdata name="picturepressedrestore" type="property" display="PicturePressedRestore"/>
		<memberdata name="changewindowstate" type="method" display="ChangeWindowState"/>
		</VFPData>
	shpmousehandler.Height = 25
	shpmousehandler.Name = "shpmousehandler"
	shpmousehandler.Width = 25
	
	PROCEDURE changetheme
		With _Screen.ThemesManager
		   *This.PictureDisabled = .GetMember("Maximize.Disabled.Picture")
		   This.PictureHover = .GetMember("Maximize.Hover.Picture")
		   This.PictureNormal = .GetMember("Maximize.Normal.Picture")
		   This.PicturePressed = .GetMember("Maximize.Pressed.Picture")
		   *This.PictureDisabledRestore = .GetMember("Restore.Disabled.Picture")
		   This.PictureHoverRestore = .GetMember("Restore.Hover.Picture")
		   This.PictureNormalRestore = .GetMember("Restore.Normal.Picture")
		   This.PicturePressedRestore = .GetMember("Restore.Pressed.Picture")
		Endwith
		With This
		   If .Initialized
		      Local lnAction, lcAction, lnState, lcState, loImage
		      For lnAction=1 To 2
		         lcAction = Iif(lnAction==1,"","Restore")
		         For lnState=1 To 4
		            lcState = Icase(lnState==1,"Normal",lnState==2,"Hover",lnState==3,"Pressed","Disabled")
		            loImage = Evaluate("This."+"img"+lcState+lcAction)
		            loImage.Picture = Evaluate("This.Picture"+lcState+lcAction)
		            loImage = Null
		         Endfor
		      Endfor
		   Endif
		Endwith
	ENDPROC

	PROCEDURE changewindowstate
		If Thisform.WindowState==2
		   Thisform.WindowState = 0
		Else
		   Thisform.WindowState = 2
		Endif
	ENDPROC

	PROCEDURE Click
		This.ChangeWindowState()
	ENDPROC

	PROCEDURE createadditionalcontrols
		Local lnControl, lcControl, lnState, lcState, loImage
		With This
		   For lnControl=1 To 2
		      lcControl = Iif(lnControl==1,"","Restore")
		      For lnState=1 To 4
		         lcState = Icase(lnState==1,"Normal",lnState==2,"Hover",lnState==3,"Pressed","Disabled")
		         .AddObject("img"+lcState+lcControl,"Image")
		         loImage = Evaluate("This."+"img"+lcState+lcControl)
		         With loImage
		            .Height = This.Height
		            .Picture = Evaluate("This.Picture"+lcState+lcControl)
		            .Width = This.Width
		            .ZOrder(1)
		            If lnState==1
		               .Visible = .T.
		            Endif
		         Endwith
		         loImage = Null
		      Endfor
		   Endfor
		Endwith
	ENDPROC

	PROCEDURE setstatus
		Lparameters lcEvent
		This.SetAll("Visible",.F.,"Image")
		If This.Enabled
		   Local lnWindowState
		   lnWindowState = This.WindowState
		   Do Case
		      Case m.lcEvent=="C" && Click
		         This.SetStatus("D")
		         This.Click()
		         This.SetStatus("U")
		      Case m.lcEvent=="D" && MouseDown
		         If lnWindowState==0
		            This.imgPressed.Visible = .T.
		         Else
		            This.imgPressedRestore.Visible = .T.
		         Endif
		      Case m.lcEvent=="E" && MouseEnter
		         If lnWindowState==0
		            This.imgHover.Visible = .T.
		         Else
		            This.imgHoverRestore.Visible = .T.
		         Endif
		      Otherwise
		         * MouseLeave and MouseUp
		         If lnWindowState==0
		            This.imgNormal.Visible = .T.
		         Else
		            This.imgNormalRestore.Visible = .T.
		         Endif
		   Endcase
		Else
		   If lnWindowState==0
		      This.imgDisabled.Visible = .T.
		   Else
		      This.imgDisabledRestore.Visible = .T.
		   Endif
		Endif
	ENDPROC

	HIDDEN PROCEDURE windowstate_assign
		Lparameters vNewVal
		This.WindowState = m.vNewVal
		This.SetStatus("")
	ENDPROC

ENDDEFINE

DEFINE CLASS cnttab AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpMouseHandler" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: createadditionalcontrols
		*m: initthemedcontrol
		*m: setimages
		*m: setstatus
		*m: setwidth
		*p: focusedfontcolor
		*p: keylabel
		*p: notfocusedfontcolor
		*p: order		&& Specifies the controlling index tag for a Cursor object.
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	HIDDEN focusedfontcolor,notfocusedfontcolor
	BackStyle = 0
	BorderWidth = 0
	focusedfontcolor = .F.
	Height = 24
	keylabel = ("")
	Name = "cnttab"
	notfocusedfontcolor = .F.
	order = 0		&& Specifies the controlling index tag for a Cursor object.
	TabStop = .F.
	Width = 50
	_memberdata = <VFPData>
		<memberdata name="setstatus" type="method" display="SetStatus"/>
		<memberdata name="setimages" type="method" display="SetImages"/>
		<memberdata name="order" type="property" display="Order"/>
		<memberdata name="keylabel" type="property" display="KeyLabel"/>
		<memberdata name="setwidth" type="method" display="SetWidth"/>
		<memberdata name="createadditionalcontrols" type="method" display="CreateAdditionalControls"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="focusedfontcolor" type="property" display="FocusedFontColor"/>
		<memberdata name="notfocusedfontcolor" type="property" display="NotFocusedFontColor"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'lblCaption' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		BackStyle = 0, ;
		Caption = "Label1", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 0, ;
		Name = "lblCaption", ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 50
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'shpMouseHandler' AS shpmousehandler WITH ;
		Anchor = 15, ;
		Height = 24, ;
		Name = "shpMouseHandler", ;
		Width = 50
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="shape" />
	
	PROCEDURE changetheme
		Local lnState, lcState, loImage
		With _Screen.ThemesManager
		   This.FocusedFontColor = .GetMember("Tab.FocusedFontColor")
		   This.NotFocusedFontColor = .GetMember("Tab.NotFocusedFontColor")
		   For lnState=1 To 3
		      lcState = Icase(lnState==1,"Hover",lnState==2,"HoverSelected","Selected")
		      loImage = Evaluate("This."+"imgLeft"+lcState)
		      loImage.Picture = .GetMember("Tab."+lcState+"_Left.Picture")
		      loImage = Null
		      loImage = Evaluate("This."+"imgMiddle"+lcState)
		      loImage.Picture = .GetMember("Tab."+lcState+"_Middle.Picture")
		      loImage = Null
		      loImage = Evaluate("This."+"imgRight"+lcState)
		      loImage.Picture = .GetMember("Tab."+lcState+"_Right.Picture")
		      loImage = Null
		   Endfor
		Endwith
		This.SetStatus("L")
	ENDPROC

	HIDDEN PROCEDURE createadditionalcontrols
		Local lnState, lcState, loImage
		With This
		   For lnState=1 To 3
		      lcState = Icase(lnState==1,"Hover",lnState==2,"HoverSelected","Selected")
		      .AddObject("imgLeft"+lcState,"Image")
		      loImage = Evaluate("This."+"imgLeft"+lcState)
		      With loImage
		         .Height = 24
		         .Width = 5
		         .ZOrder(1)
		      Endwith
		      loImage = Null
		      .AddObject("imgMiddle"+lcState,"Image")
		      loImage = Evaluate("This."+"imgMiddle"+lcState)
		      With loImage
		         .Height = 24
		         .Left = 4
		         .Stretch = 2
		         .Width = This.Width -8
		         .ZOrder(1)
		      Endwith
		      loImage = Null
		      .AddObject("imgRight"+lcState,"Image")
		      loImage = Evaluate("This."+"imgRight"+lcState)
		      With loImage
		         .Height = 24
		         .Left = This.Width - 5
		         .Width = 5
		         .ZOrder(1)
		      Endwith
		      loImage = Null
		   Endfor
		Endwith
	ENDPROC

	PROCEDURE Destroy
		If Not Empty(This.KeyLabel)
		   On Key Label (This.KeyLabel)
		Endif
	ENDPROC

	PROCEDURE Init
		Lparameters lcCaption, lnLeft, lnOrder
		This.lblCaption.Caption = lcCaption
		This.Left = lnLeft
		This.Order = lnOrder
		Local lnPos
		lnPos = At("\<",lcCaption)
		If lnPos > 0
		   Local lcHierarchy, lcCommand
		   lcHierarchy = Sys(1272,This) + ".SetStatus('D')"
		   lcCommand = Juststem(Sys(1271, This)) + Substr(lcHierarchy,At(".",lcHierarchy))
		   This.KeyLabel = "Alt+" + Substr(lcCaption,lnPos+2,1)
		   On Key Label (This.KeyLabel) &lcCommand.
		Endif
		This.SetWidth()
		This.CreateAdditionalControls()
		This.InitThemedControl()
		This.Visible = .T.
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE setimages
		Lparameters llHover, llSelected
		Store llHover And Not llSelected To ;
		   This.imgLeftHover.Visible, ;
		   This.imgMiddleHover.Visible, ;
		   This.imgRightHover.Visible
		Store llHover And llSelected To ;
		   This.imgLeftHoverSelected.Visible, ;
		   This.imgMiddleHoverSelected.Visible, ;
		   This.imgRightHoverSelected.Visible
		Store Not llHover And llSelected To ;
		   This.imgLeftSelected.Visible, ;
		   This.imgMiddleSelected.Visible, ;
		   This.imgRightSelected.Visible
		If llSelected
		   This.lblCaption.ForeColor = This.FocusedFontColor
		Else
		   This.lblCaption.ForeColor = This.NotFocusedFontColor
		Endif
	ENDPROC

	PROCEDURE setstatus
		Lparameters lcEvent
		With This
		   Do Case
		      Case m.lcEvent=="D" && MouseDown
		         .Parent.SetStatus(.Name, .Name)
		      Case m.lcEvent=="E" && MouseEnter
		         .Parent.SetStatus(.Name, "")
		      Case m.lcEvent=="L" && MouseLeave
		         .Parent.SetStatus("", "")
		      Otherwise
		   Endcase
		Endwith
	ENDPROC

	PROCEDURE setwidth
		With This
		   Local lnTxtWidth
		   lnTxtWidth = Ceiling( Txtwidth(" " + .lblCaption.Caption + " ", ;
		      .lblCaption.FontName, .lblCaption.FontSize ) * ;
		      Fontmetric(6, .lblCaption.FontName, .lblCaption.FontSize) )
		   .Width = lnTxtWidth + 10
		Endwith
	ENDPROC

	PROCEDURE shpMouseHandler.MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.SetStatus("E")
	ENDPROC

	PROCEDURE shpMouseHandler.MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.SetStatus("L")
	ENDPROC

ENDDEFINE

DEFINE CLASS cnttabs AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: setstatus
		*p: hoveredtab
		*p: selectedtab
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Anchor = 11
	BackStyle = 0
	BorderWidth = 0
	Height = 24
	hoveredtab = ("")
	Name = "cnttabs"
	selectedtab = ("")
	TabStop = .F.
	Width = 631
	_memberdata = <VFPData>
		<memberdata name="selectedtab" type="property" display="SelectedTab"/>
		<memberdata name="setstatus" type="method" display="SetStatus"/>
		<memberdata name="hoveredtab" type="property" display="HoveredTab"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE setstatus
		Lparameters lcHover, lcSelected, llSelected
		This.HoveredTab = Upper(lcHover)
		If Not Empty(lcSelected)
		   This.SelectedTab = Upper(lcSelected)
		Endif
		Thisform.LockScreen = .T.
		Local loTab
		For Each loTab In This.Controls
		   With loTab
		      llSelected = Upper(.Name)==This.SelectedTab
		      .SetImages(Upper(.Name)==This.HoveredTab, llSelected)
		      If llSelected
		         This.Parent.Tabs.ActivePage = .Order
		      Endif
		   Endwith
		Endfor
		loTab = Null
		Thisform.LockScreen = .F.
	ENDPROC

ENDDEFINE

DEFINE CLASS dialogboxlauncher AS cntmousehandler OF "ribbon.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: createadditionalcontrols
		*m: enabled_assign
		*m: hidescreentip
		*m: initthemedcontrol
		*m: showscreentip
		*p: screentipimage
		*p: screentiptext
		*p: screentiptitle
	*</DefinedPropArrayMethod>

	Height = 14
	Name = "dialogboxlauncher"
	screentipimage = ("")
	screentiptext = ("")
	screentiptitle = ("")
	Width = 15
	_memberdata = <VFPData>
		<memberdata name="createadditionalcontrols" type="method" display="CreateAdditionalControls"/>
		<memberdata name="enabled_assign" type="method" display="Enabled_Assign"/>
		<memberdata name="screentiptext" type="property" display="ScreenTipText"/>
		<memberdata name="screentiptitle" type="property" display="ScreenTipTitle"/>
		<memberdata name="showscreentip" type="method" display="ShowScreenTip"/>
		<memberdata name="hidescreentip" type="method" display="HideScreenTip"/>
		<memberdata name="screentipimage" type="property" display="ScreenTipImage"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		</VFPData>
	
	PROCEDURE changetheme
		Local lnState, lcState, loImage
		With _Screen.ThemesManager
		   For lnState=1 To 4
		      lcState = Icase(lnState==1,"Normal", ;
		         lnState==2,"Hover", ;
		         lnState==3,"Pressed", ;
		         "Disabled")
		      loImage = Evaluate("This."+"img"+lcState)
		      loImage.Picture = .GetMember("DialogBoxLauncher."+lcState+".Picture")
		      loImage = Null
		   Endfor
		Endwith
		This.SetStatus("L")
	ENDPROC

	HIDDEN PROCEDURE createadditionalcontrols
		Local lnState, lcState, loImage
		With This
		   For lnState=1 To 4
		      lcState = Icase(lnState==1,"Normal", ;
		         lnState==2,"Hover", ;
		         lnState==3,"Pressed", ;
		         "Disabled")
		      .AddObject("img"+lcState,"Image")
		      loImage = Evaluate("This."+"img"+lcState)
		      With loImage
		         .BackStyle = 0
		         .Enabled = .F.
		         .Height = This.Height
		         .Width = This.Width
		         .ZOrder(1)
		         .Visible = (lnState==1)
		      Endwith
		      loImage = Null
		   Endfor
		   *
		   .Newobject("shpMouseHandler","shpMouseHandler",.ClassLibrary)
		   With .shpMouseHandler
		      .Height = This.Height
		      .Width = This.Width
		      .ZOrder(0)
		      .Visible = .T.
		   Endwith
		Endwith
	ENDPROC

	HIDDEN PROCEDURE enabled_assign
		Lparameters vNewVal
		This.Enabled = m.vNewVal
		This.SetStatus("")
	ENDPROC

	PROCEDURE hidescreentip
		If Pemstatus(Thisform,"ScreenTip",5)
			Thisform.ScreenTip.Hide()
		Endif
	ENDPROC

	PROCEDURE Init
		This.CreateAdditionalControls()
		This.InitThemedControl()
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE setstatus
		Lparameters lcEvent
		This.SetAll("Visible",.F.,"Image")
		If This.Enabled
		   Do Case
		      Case m.lcEvent=="C" && Click
		         This.SetStatus("D")
		         This.Click()
		         This.SetStatus("U")
		      Case m.lcEvent=="D" && MouseDown
		         This.imgPressed.Visible = .T.
		         This.HideScreenTip()
		      Case m.lcEvent=="E" && MouseEnter
		         This.imgHover.Visible = .T.
		         This.ShowScreenTip()
		      Otherwise
		         * MouseLeave and MouseUp
		         This.imgNormal.Visible = .T.
		         This.HideScreenTip()
		   Endcase
		Else
		   This.imgDisabled.Visible = .T.
		Endif
	ENDPROC

	PROCEDURE showscreentip
		If Pemstatus(Thisform,"ScreenTip",5)
		   Thisform.ScreenTip.Show(This.ScreenTipTitle, ;
		      This.ScreenTipText, ;
		      This.ScreenTipImage, ;
		      2)
		Endif
	ENDPROC

ENDDEFINE

DEFINE CLASS group AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="DialogBoxLauncher" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: createadditionalcontrols
		*m: hasdialogboxlauncher_assign
		*m: initthemedcontrol
		*m: setimages
		*m: updatecontrolsenabledproperty
		*p: focusedfontcolor
		*p: hasdialogboxlauncher
		*p: notfocusedfontcolor
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	HIDDEN focusedfontcolor,notfocusedfontcolor
	BorderWidth = 0
	focusedfontcolor = .F.
	hasdialogboxlauncher = .T.
	Height = 85
	Name = "group"
	notfocusedfontcolor = .F.
	Width = 100
	_memberdata = <VFPData>
		<memberdata name="setimages" type="method" display="SetImages"/>
		<memberdata name="hasdialogboxlauncher" type="property" display="HasDialogBoxLauncher" favorites="True"/>
		<memberdata name="hasdialogboxlauncher_assign" type="method" display="HasDialogboxLauncher_Assign"/>
		<memberdata name="updatecontrolsenabledproperty" type="method" display="UpdateControlsEnabledProperty"/>
		<memberdata name="createadditionalcontrols" type="method" display="CreateAdditionalControls"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		<memberdata name="focusedfontcolor" type="property" display="FocusedFontColor"/>
		<memberdata name="notfocusedfontcolor" type="property" display="NotFocusedFontColor"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'DialogBoxLauncher' AS dialogboxlauncher WITH ;
		Left = 83, ;
		Name = "DialogBoxLauncher", ;
		Top = 69
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'lblCaption' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		BackStyle = 0, ;
		Caption = "Label", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 3, ;
		Name = "lblCaption", ;
		Top = 69, ;
		Width = 81
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE changetheme
		Local lnState, lcState, loImage
		With _Screen.ThemesManager
		   This.FocusedFontColor = .GetMember("Group.FocusedFontColor")
		   This.NotFocusedFontColor = .GetMember("Group.NotFocusedFontColor")
		   For lnState=1 To 2
		      lcState = Iif(lnState==1,"Normal","Hover")
		      loImage = Evaluate("This."+"imgLeft"+lcState)
		      loImage.Picture = .GetMember("Group."+lcState+"_Left.Picture")
		      loImage = Null
		      loImage = Evaluate("This."+"imgMiddle"+lcState)
		      loImage.Picture = .GetMember("Group."+lcState+"_Middle.Picture")
		      loImage = Null
		      loImage = Evaluate("This."+"imgRight"+lcState)
		      loImage.Picture = .GetMember("Group."+lcState+"_Right.Picture")
		      loImage = Null
		   Endfor
		Endwith
		This.SetImages(.F.)
	ENDPROC

	HIDDEN PROCEDURE createadditionalcontrols
		Local lnState, lcState, loImage
		With This
		   For lnState=1 To 2
		      lcState = Iif(lnState==1,"Normal","Hover")
		      .AddObject("imgLeft"+lcState,"Image")
		      loImage = Evaluate("This."+"imgLeft"+lcState)
		      With loImage
		         .Height = 85
		         .Width = 3
		         .ZOrder(1)
		         .Visible = (lnState==1)
		      Endwith
		      loImage = Null
		      .AddObject("imgMiddle"+lcState,"Image")
		      loImage = Evaluate("This."+"imgMiddle"+lcState)
		      With loImage
		         .Height = 85
		         .Left = 3
		         .Stretch = 2
		         .Width = This.Width - 6
		         .ZOrder(1)
		         .Visible = (lnState==1)
		      Endwith
		      loImage = Null
		      .AddObject("imgRight"+lcState,"Image")
		      loImage = Evaluate("This."+"imgRight"+lcState)
		      With loImage
		         .Height = 85
		         .Left = This.Width - 3
		         .Width = 3
		         .ZOrder(1)
		         .Visible = (lnState==1)
		      Endwith
		      loImage = Null
		   Endfor
		Endwith
	ENDPROC

	HIDDEN PROCEDURE hasdialogboxlauncher_assign
		Lparameters vNewVal
		With This
		   Store m.vNewVal To ;
		      .HasDialogBoxLauncher, ;
		      .DialogBoxLauncher.Visible
		   .lblCaption.Anchor = 0
		   .lblCaption.Width = .Width - Iif(m.vNewVal,19,7)
		   .lblCaption.Anchor = 8
		Endwith
	ENDPROC

	PROCEDURE Init
		With This
		   .CreateAdditionalControls()
		   .InitThemedControl()
		   .HasDialogBoxLauncher = .HasDialogBoxLauncher
		   .UpdateControlsEnabledProperty(.F.)
		Endwith
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE MouseEnter
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.SetImages(.T.)
	ENDPROC

	PROCEDURE MouseLeave
		Lparameters nButton, nShift, nXCoord, nYCoord
		Local loMouseObj
		loMouseObj = Sys(1270)
		If Vartype(loMouseObj)=="O"
		   If Not Type("loMouseObj.Parent")=="O" Or ;
		         Not Upper(loMouseObj.Parent.Name)==Upper(This.Name)
		      This.SetImages(.F.)
		   Endif
		Endif
		loMouseObj = Null
	ENDPROC

	PROCEDURE setimages
		Lparameters llHover
		Store Not llHover To ;
		   This.imgLeftNormal.Visible, ;
		   This.imgMiddleNormal.Visible, ;
		   This.imgRightNormal.Visible
		Store llHover To ;
		   This.imgLeftHover.Visible, ;
		   This.imgMiddleHover.Visible, ;
		   This.imgRightHover.Visible
		If llHover
		   This.lblCaption.ForeColor = This.FocusedFontColor
		Else
		   This.lblCaption.ForeColor = This.NotFocusedFontColor
		Endif   
		This.SetAll("State",Iif(llHover,1,0),"Spacer")
	ENDPROC

	PROCEDURE updatecontrolsenabledproperty
		Lparameters llForce, llEnabled
		If Not llForce
		   llEnabled = .T.
		Endif
		Local llGroupDisabled, loControl, luSkipFor
		llGroupDisabled = .T.
		For Each loControl In This.Controls
		   If Pemstatus(loControl,"SkipFor",5)
		      luSkipFor = loControl.SkipFor
		      loControl.Enabled = Iif( llForce, llEnabled, ;
		         Iif(Vartype(luSkipFor)=="L",Not luSkipFor,Evaluate(luSkipFor)) )
		      llGroupDisabled = Iif(loControl.Enabled,.F.,llGroupDisabled)
		   Endif
		Endfor
		loControl = Null
		This.DialogBoxLauncher.Enabled = Not llGroupDisabled
	ENDPROC

ENDDEFINE

DEFINE CLASS pagtab AS page 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: updatecontrolsenabledproperty
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BackStyle = 0
	Caption = "Page1"
	FontSize = 8
	Height = 185
	Name = "pagtab"
	Width = 185
	_memberdata = <VFPData>
		<memberdata name="updatecontrolsenabledproperty" type="method" display="UpdateControlsEnabledProperty"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE updatecontrolsenabledproperty
		Lparameters llForce, llEnabled
		Local loGroup
		For Each loGroup In This.Controls
		   loGroup.UpdateControlsEnabledProperty(llForce, llEnabled)
		Endfor
		loGroup = Null
	ENDPROC

ENDDEFINE

DEFINE CLASS pgftabs AS pageframe 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	ActivePage = 0
	ErasePage = .T.
	Height = 167
	MemberClass = "pagtab"
	MemberClassLibrary = ribbon.vcx
	Name = "pgftabs"
	TabStop = .F.
	TabStyle = 1
	Themes = .F.
	Width = 241

ENDDEFINE

DEFINE CLASS quickaccesstoolbar AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgMiddle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntQuickAccessTbrShortcut" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: initthemedcontrol
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 25
	Name = "quickaccesstoolbar"
	Width = 130
	_memberdata = <VFPData>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cntQuickAccessTbrShortcut' AS cnthottracking WITH ;
		Height = 22, ;
		Left = 115, ;
		Name = "cntQuickAccessTbrShortcut", ;
		Top = 0, ;
		Width = 13, ;
		shpmousehandler.Height = 22, ;
		shpmousehandler.Name = "shpmousehandler", ;
		shpmousehandler.Width = 13
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'imgLeft' AS image WITH ;
		BackStyle = 0, ;
		Height = 24, ;
		Left = 0, ;
		Name = "imgLeft", ;
		Top = 1, ;
		Width = 12
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgMiddle' AS image WITH ;
		Anchor = 10, ;
		Height = 24, ;
		Left = 12, ;
		Name = "imgMiddle", ;
		Stretch = 2, ;
		Top = 1, ;
		Width = 91
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgRight' AS image WITH ;
		Anchor = 8, ;
		BackStyle = 0, ;
		Height = 24, ;
		Left = 103, ;
		Name = "imgRight", ;
		Top = 1, ;
		Width = 10
		*< END OBJECT: BaseClass="image" />
	
	PROCEDURE changetheme
		With _Screen.ThemesManager
		   This.imgLeft.Picture = .GetMember("QuickAccessToolbar.Left.Picture")
		   This.imgMiddle.Picture = .GetMember("QuickAccessToolbar.Middle.Picture")
		   This.imgRight.Picture = .GetMember("QuickAccessToolbar.Right.Picture")
		   DoDefault()
		Endwith
	ENDPROC

	PROCEDURE Init
		This.InitThemedControl()
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE cntQuickAccessTbrShortcut.changetheme
		With _Screen.ThemesManager
		   *This.PictureDisabled = .GetMember("QuickAccessToolbar.DropdownArrow.Disabled.Picture")
		   This.PictureHover = .GetMember("QuickAccessToolbar.DropdownArrow.Hover.Picture")
		   This.PictureNormal = .GetMember("QuickAccessToolbar.DropdownArrow.Normal.Picture")
		   This.PicturePressed = .GetMember("QuickAccessToolbar.DropdownArrow.Pressed.Picture")
		   DoDefault()
		Endwith
	ENDPROC

ENDDEFINE

DEFINE CLASS ribbon AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="shpTabsBackground" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgBackgroundRight" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgBackgroundMiddle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgBackgroundLeft" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntTabs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Tabs" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: initthemedcontrol
		*m: updatecontrolsenabledproperty
		*p: showscreentipatbottom
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Anchor = 11
	BackStyle = 0
	BorderWidth = 0
	Height = 116
	Name = "ribbon"
	showscreentipatbottom = .T.
	TabStop = .F.
	Width = 691
	_memberdata = <VFPData>
		<memberdata name="updatecontrolsenabledproperty" type="method" display="UpdateControlsEnabledProperty"/>
		<memberdata name="showscreentipatbottom" type="property" display="ShowScreenTipAtBottom"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cntTabs' AS cnttabs WITH ;
		Anchor = 10, ;
		Left = 53, ;
		Name = "cntTabs", ;
		Top = 0
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'imgBackgroundLeft' AS image WITH ;
		Anchor = 2, ;
		BackStyle = 0, ;
		Height = 93, ;
		Left = 8, ;
		Name = "imgBackgroundLeft", ;
		Top = 23, ;
		Width = 5
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgBackgroundMiddle' AS image WITH ;
		Anchor = 10, ;
		BackStyle = 0, ;
		Height = 93, ;
		Left = 13, ;
		Name = "imgBackgroundMiddle", ;
		Stretch = 2, ;
		Top = 23, ;
		Width = 666
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgBackgroundRight' AS image WITH ;
		Anchor = 8, ;
		BackStyle = 0, ;
		Height = 93, ;
		Left = 679, ;
		Name = "imgBackgroundRight", ;
		Top = 23, ;
		Width = 5
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'shpTabsBackground' AS shape WITH ;
		Anchor = 10, ;
		BorderStyle = 0, ;
		Height = 24, ;
		Left = 8, ;
		Name = "shpTabsBackground", ;
		Top = 0, ;
		Width = 676
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Tabs' AS pgftabs WITH ;
		Anchor = 10, ;
		ErasePage = .T., ;
		Height = 116, ;
		Left = 8, ;
		Name = "Tabs", ;
		Width = 676
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="pageframe" />
	
	PROCEDURE changetheme
		With _Screen.ThemesManager
		   This.shpTabsBackground.BackColor = .GetMember("Tabs.BackColor")
		   This.imgBackgroundLeft.Picture = .GetMember("Ribbon.Left.Picture")
		   This.imgBackgroundMiddle.Picture = .GetMember("Ribbon.Middle.Picture")
		   This.imgBackgroundRight.Picture = .GetMember("Ribbon.Right.Picture")
		Endwith
	ENDPROC

	PROCEDURE Init
		Local lnLeft, loTab, lcTab, lcFirstTab
		lnLeft = 0
		For Each loTab In This.Tabs.Pages
		   With loTab
		      lcTab = .Name
		      This.cntTabs.Newobject(lcTab,"cntTab",This.ClassLibrary,,.Caption, lnLeft, .PageOrder)
		      lnLeft = lnLeft + This.cntTabs.&lcTab..Width + 1
		      If loTab.PageOrder==1
		         lcFirstTab = lcTab
		      Endif
		      loTab.Caption = ""
		   Endwith
		Endfor
		loTab = Null
		With This
		   With .Tabs
		      .Anchor = 0
		      .Tabs = .F.
		      .BorderWidth = 0
		      .Height = 87
		      .Left = 10
		      .Top = 25
		      .Width = 669
		      .Anchor = 10
		   Endwith
		   .cntTabs.SetStatus("", lcFirstTab)
		   .InitThemedControl()
		Endwith
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE updatecontrolsenabledproperty
		Lparameters llForce, llEnabled
		Local loTab
		For Each loTab In This.Tabs.Pages
		   loTab.UpdateControlsEnabledProperty(llForce, llEnabled)
		Endfor
		loTab = Null
	ENDPROC

ENDDEFINE

DEFINE CLASS ribbonbutton AS cntmousehandler OF "ribbon.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="imgPicture" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCaption" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: createadditionalcontrols
		*m: enabled_assign
		*m: hidescreentip
		*m: initthemedcontrol
		*m: setimages
		*m: setwidth
		*m: showscreentip
		*p: custombuilder
		*p: disabledfontcolor
		*p: enabledfontcolor
		*p: picturedisabled
		*p: pictureenabled
		*p: screentipimage
		*p: screentiptext
		*p: screentiptitle
		*p: size		&& [L]arge, [M]edium or [S]mall.
		*p: skipfor
	*</DefinedPropArrayMethod>

	HIDDEN disabledfontcolor,enabledfontcolor
	custombuilder = Double click here to open Builder
	disabledfontcolor = .F.
	enabledfontcolor = .F.
	Height = 66
	Name = "ribbonbutton"
	picturedisabled = ("")
	pictureenabled = ("")
	screentipimage = ("")
	screentiptext = ("")
	screentiptitle = ("")
	size = L		&& [L]arge, [M]edium or [S]mall.
	skipfor = .F.
	Width = 47
	_memberdata = <VFPData>
		<memberdata name="setimages" type="method" display="SetImages"/>
		<memberdata name="skipfor" type="property" display="SkipFor"/>
		<memberdata name="enabled_assign" type="method" display="Enabled_Assign"/>
		<memberdata name="picturedisabled" type="property" display="PictureDisabled"/>
		<memberdata name="pictureenabled" type="property" display="PictureEnabled"/>
		<memberdata name="setwidth" type="method" display="SetWidth"/>
		<memberdata name="createadditionalcontrols" type="method" display="CreateAdditionalControls"/>
		<memberdata name="screentiptext" type="property" display="ScreenTipText"/>
		<memberdata name="screentiptitle" type="property" display="ScreenTipTitle"/>
		<memberdata name="showscreentip" type="method" display="ShowScreenTip"/>
		<memberdata name="hidescreentip" type="method" display="HideScreenTip"/>
		<memberdata name="custombuilder" type="property" display="CustomBuilder" script="Local lnControls, laObjects[1]&#xA;m.lnControls = Aselobj(m.laObjects)&#xA;If m.lnControls # 0&#xA;   Local loObject, lcClassLib, loBuilder&#xA;   m.loObject = m.laObjects[1]&#xA;   m.lcClassLib = Addbs(Justpath(m.loObject.ClassLibrary))+&quot;ThemedControlsBuilders.vcx&quot;&#xA;   Set Classlib To (m.lcClassLib) Additive&#xA;   m.loBuilder = Createobject(&quot;RibbonButtonBuilder&quot;, m.loObject)&#xA;   m.loBuilder.Show()&#xA;Endif"/>
		<memberdata name="size" type="property" display="Size"/>
		<memberdata name="screentipimage" type="property" display="ScreenTipImage"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="disabledfontcolor" type="property" display="DisabledFontColor"/>
		<memberdata name="enabledfontcolor" type="property" display="EnabledFontColor"/>
		</VFPData>

	ADD OBJECT 'imgPicture' AS image WITH ;
		BackStyle = 0, ;
		Height = 32, ;
		Left = 7, ;
		Name = "imgPicture", ;
		Top = 2, ;
		Width = 32, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'lblCaption' AS label WITH ;
		Alignment = 2, ;
		BackStyle = 0, ;
		Caption = "Label", ;
		FontSize = 8, ;
		Height = 27, ;
		Left = 2, ;
		Name = "lblCaption", ;
		Top = 36, ;
		Width = 43, ;
		WordWrap = .T., ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE changetheme
		Local lcSize, lnState, lcState, loImage
		With _Screen.ThemesManager
		   This.EnabledFontColor = .GetMember("RibbonButton.EnabledFontColor")
		   This.DisabledFontColor = .GetMember("RibbonButton.DisabledFontColor")
		   lcSize = Iif(This.Size=="L","Large","Medium")
		   For lnState=1 To 2
		      lcState = Iif(lnState==1,"Hover","Pressed")
		      loImage = Evaluate("This."+"imgLeft"+lcState)
		      loImage.Picture = .GetMember(lcSize+"Button."+lcState+"_Left.Picture")
		      loImage = Null
		      loImage = Evaluate("This."+"imgMiddle"+lcState)
		      loImage.Picture = .GetMember(lcSize+"Button."+lcState+"_Middle.Picture")
		      loImage = Null
		      loImage = Evaluate("This."+"imgRight"+lcState)
		      loImage.Picture = .GetMember(lcSize+"Button."+lcState+"_Right.Picture")
		      loImage = Null
		   Endfor
		Endwith
		This.SetStatus("L")
	ENDPROC

	PROCEDURE Click
		If This.Enabled
		
		Endif
	ENDPROC

	HIDDEN PROCEDURE createadditionalcontrols
		Local lnState, lcState, loImage
		With This
		   For lnState=1 To 2
		      lcState = Iif(lnState==1,"Hover","Pressed")
		      .AddObject("imgLeft"+lcState,"Image")
		      loImage = Evaluate("This."+"imgLeft"+lcState)
		      With loImage
		         .BackStyle = 0
		         .Height = This.Height
		         .Width = 3
		         .ZOrder(1)
		      Endwith
		      loImage = Null
		      .AddObject("imgMiddle"+lcState,"Image")
		      loImage = Evaluate("This."+"imgMiddle"+lcState)
		      With loImage
		         .BackStyle = 0
		         .Height = This.Height
		         .Left = 3
		         .Stretch = 2
		         .Width = This.Width - 6
		         .ZOrder(1)
		      Endwith
		      loImage = Null
		      .AddObject("imgRight"+lcState,"Image")
		      loImage = Evaluate("This."+"imgRight"+lcState)
		      With loImage
		         .BackStyle = 0
		         .Height = This.Height
		         .Left = This.Width - 3
		         .Width = 3
		         .ZOrder(1)
		      Endwith
		      loImage = Null
		   Endfor
		   *
		   .Newobject("shpMouseHandler","shpMouseHandler",.ClassLibrary)
		   With .shpMouseHandler
		      .Height = This.Height
		      .Width = This.Width
		      .ZOrder(0)
		      .Visible = .T.
		   Endwith
		Endwith
	ENDPROC

	HIDDEN PROCEDURE enabled_assign
		Lparameters vNewVal
		With This
		   .Enabled = m.vNewVal
		   .ImgPicture.Picture = Iif(m.vNewVal,.PictureEnabled,.PictureDisabled)
		   .SetImages(.F., .F.)
		Endwith
	ENDPROC

	PROCEDURE hidescreentip
		If Pemstatus(Thisform,"ScreenTip",5)
			Thisform.ScreenTip.Hide()
		Endif
	ENDPROC

	PROCEDURE Init
		With This
		   .CreateAdditionalControls()
		   .InitThemedControl()
		   .SetWidth()
		Endwith
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE setimages
		Lparameters llHover, llPressed
		Local lnLabelColor
		If This.Enabled
		   Store This.Enabled And llHover To ;
		      This.imgLeftHover.Visible, ;
		      This.imgMiddleHover.Visible, ;
		      This.imgRightHover.Visible
		   Store This.Enabled And llPressed To ;
		      This.imgLeftPressed.Visible, ;
		      This.imgMiddlePressed.Visible, ;
		      This.imgRightPressed.Visible
		   lnLabelColor = This.EnabledFontColor
		Else
		   lnLabelColor = This.DisabledFontColor
		Endif
		This.lblCaption.ForeColor = lnLabelColor
	ENDPROC

	PROCEDURE setstatus
		Lparameters lcEvent
		Do Case
		   Case m.lcEvent=="C" && Click
		      This.SetStatus("D")
		      This.Click()
		      This.SetStatus("U")
		   Case m.lcEvent=="D" && MouseDown
		      This.SetImages(.F., .T.)
		      This.HideScreenTip()
		   Case m.lcEvent=="E" && MouseEnter
		      This.SetImages(.T., .F.)
		      This.ShowScreenTip()
		   Case m.lcEvent=="L" && MouseLeave
		      This.SetImages(.F., .F.)
		      This.HideScreenTip()
		   Case m.lcEvent=="U" && MouseUp
		      This.SetImages(.T., .F.)
		      This.HideScreenTip()
		   Otherwise
		Endcase
	ENDPROC

	PROCEDURE setwidth
		With This
			Do Case
				Case .Size=="M"
					Local lnTxtWidth
					lnTxtWidth = Ceiling( Txtwidth(.lblCaption.Caption + " ", ;
						.lblCaption.FontName, .lblCaption.FontSize ) * ;
						Fontmetric(6, .lblCaption.FontName, .lblCaption.FontSize) )
					.Width = .lblCaption.Left + lnTxtWidth + 2
					Store .Width - 6 To ;
						.imgMiddleHover.Width, ;
						.imgMiddlePressed.Width
					Store .Width - 3 To ;
						.imgRightHover.Left, ;
						.imgRightPressed.Left
				Case .Size=="S"
					Nodefault
			Endcase
		Endwith
	ENDPROC

	PROCEDURE showscreentip
		If Pemstatus(Thisform,"ScreenTip",5)
		   Local lnType
		   m.lnType = Iif(Upper(This.Parent.Class)=="QUICKACCESSTOOLBAR",1,2)
		   Thisform.ScreenTip.Show(This.ScreenTipTitle, ;
		      This.ScreenTipText, ;
		      This.ScreenTipImage, ;
		      m.lnType)
		Endif
	ENDPROC

ENDDEFINE

DEFINE CLASS ribbonform AS themedform OF "ribbon.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="QuickAccessToolbar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="ApplicationButton" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Ribbon" UniqueID="" Timestamp="" />

	DoCreate = .T.
	MDIForm = .T.
	Name = "ribbonform"
	ShowInTaskBar = .T.
	ShowWindow = 2
	_memberdata = <VFPData>

		</VFPData>
	cntformskin.cntClose.Name = "cntClose"
	cntformskin.cntClose.shpmousehandler.Name = "shpmousehandler"
	cntformskin.cntMaximize.Name = "cntMaximize"
	cntformskin.cntMaximize.shpmousehandler.Name = "shpmousehandler"
	cntformskin.cntMinimize.Name = "cntMinimize"
	cntformskin.cntMinimize.shpmousehandler.Name = "shpmousehandler"
	cntformskin.imgBackgroundLeft.Name = "imgBackgroundLeft"
	cntformskin.imgBackgroundMiddle.Name = "imgBackgroundMiddle"
	cntformskin.imgBackgroundRight.Name = "imgBackgroundRight"
	cntformskin.lblTitle.Alignment = 2
	cntformskin.lblTitle.Height = 17
	cntformskin.lblTitle.Left = 172
	cntformskin.lblTitle.Name = "lblTitle"
	cntformskin.lblTitle.Top = 9
	cntformskin.lblTitle.Width = 435
	cntformskin.Name = "cntformskin"
	cntformskin.shpBackground.Name = "shpBackground"
	cntformskin.ZOrderSet = 1
	cntUserControls.Height = 302
	cntUserControls.Left = 0
	cntUserControls.Name = "cntUserControls"
	cntUserControls.Top = 148
	cntUserControls.Width = 691
	cntUserControls.ZOrderSet = 2
	screentip.Name = "screentip"
	screentip.tmrHide.Name = "tmrHide"
	screentip.tmrShow.Name = "tmrShow"
	screentip.ZOrderSet = 0

	ADD OBJECT 'ApplicationButton' AS applicationbutton WITH ;
		Left = 9, ;
		Name = "ApplicationButton", ;
		Top = 7, ;
		ZOrderSet = 4, ;
		imgApplication.Name = "imgApplication", ;
		shpMouseHandler.Name = "shpMouseHandler"
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'QuickAccessToolbar' AS quickaccesstoolbar WITH ;
		Left = 44, ;
		Name = "QuickAccessToolbar", ;
		Top = 4, ;
		ZOrderSet = 3, ;
		cntQuickAccessTbrShortcut.Name = "cntQuickAccessTbrShortcut", ;
		cntQuickAccessTbrShortcut.shpMouseHandler.Name = "shpMouseHandler", ;
		imgLeft.Name = "imgLeft", ;
		imgMiddle.Name = "imgMiddle", ;
		imgRight.Name = "imgRight"
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'Ribbon' AS ribbon WITH ;
		Left = 0, ;
		Name = "Ribbon", ;
		Top = 31, ;
		ZOrderSet = 5, ;
		cnttabs.Name = "cnttabs", ;
		imgBackgroundLeft.Name = "imgBackgroundLeft", ;
		imgBackgroundMiddle.Name = "imgBackgroundMiddle", ;
		imgBackgroundRight.Name = "imgBackgroundRight", ;
		shpTabsBackground.Name = "shpTabsBackground", ;
		Tabs.ErasePage = .T., ;
		Tabs.Name = "Tabs"
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

ENDDEFINE

DEFINE CLASS shpmousehandler AS shape 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	BackStyle = 0
	BorderStyle = 0
	Height = 17
	Name = "shpmousehandler"
	Width = 100
	
	PROCEDURE Click
		This.Parent.SetStatus("C")
	ENDPROC

	PROCEDURE MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.SetStatus("D")
	ENDPROC

	PROCEDURE MouseUp
		Lparameters nButton, nShift, nXCoord, nYCoord
		This.Parent.SetStatus("U")
	ENDPROC

ENDDEFINE

DEFINE CLASS spacer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: changetheme
		*m: createadditionalcontrols
		*m: initthemedcontrol
		*m: setimages
		*m: state_assign
		*p: state
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	Height = 55
	Name = "spacer"
	state = 0
	Width = 2
	_memberdata = <VFPData>
		<memberdata name="state" type="property" display="State"/>
		<memberdata name="state_assign" type="method" display="State_Assign"/>
		<memberdata name="setimages" type="method" display="SetImages"/>
		<memberdata name="createadditionalcontrols" type="method" display="CreateAdditionalControls"/>
		<memberdata name="changetheme" type="method" display="ChangeTheme"/>
		<memberdata name="initthemedcontrol" type="method" display="InitThemedControl"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE changetheme
		Local lnState, lcState, loImage
		With _Screen.ThemesManager
		   For lnState=1 To 2
		      lcState = Iif(lnState==1,"Normal","Hover")
		      loImage = Evaluate("This."+"img"+lcState)
		      loImage.Picture = .GetMember("Spacer."+lcState+".Picture")
		      loImage = Null
		   Endfor
		Endwith
		This.SetImages(.F.)
	ENDPROC

	HIDDEN PROCEDURE createadditionalcontrols
		Local lnState, lcState, loImage
		With This
		   For lnState=1 To 2
		      lcState = Iif(lnState==1,"Normal","Hover")
		      .AddObject("img"+lcState,"Image")
		      loImage = Evaluate("This."+"img"+lcState)
		      With loImage
		         .Height = This.Height
		         .Width = This.Width
		         .ZOrder(1)
		         .Visible = (lnState==1)
		      Endwith
		      loImage = Null
		   Endfor
		Endwith
	ENDPROC

	PROCEDURE Init
		This.CreateAdditionalControls()
		This.InitThemedControl()
	ENDPROC

	HIDDEN PROCEDURE initthemedcontrol
		If Not Vartype(_Screen.ThemesManager)=="O"
		   _Screen.Newobject("ThemesManager","ThemesManager",Forcepath('ThemedControls.vcx', Justpath(This.ClassLibrary)))
		Endif
		This.ChangeTheme()
	ENDPROC

	PROCEDURE setimages
		Lparameters llHover
		With This
		   .imgNormal.Visible = Not llHover
		   .imgHover.Visible = llHover
		Endwith
	ENDPROC

	HIDDEN PROCEDURE state_assign
		Lparameters vNewVal
		This.State = m.vNewVal
		This.SetImages(m.vNewVal==1)
	ENDPROC

ENDDEFINE

DEFINE CLASS themedform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="ScreenTip" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntFormSkin" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntUserControls" UniqueID="" Timestamp="" />

	#INCLUDE "themedcontrols.h"
	*<DefinedPropArrayMethod>
		*m: caption_assign
		*m: makeopaque
		*m: maketransparent
		*m: windowstate_assign
		*p: fillentiredesktop
		*p: sumeveniftitlebarisoff
		*p: version
		*p: windowflags
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	HIDDEN windowflags
	AutoCenter = .T.
	BackColor = 255,255,254
	BorderStyle = 0
	Caption = "Caption"
	ControlBox = .F.
	Desktop = .T.
	DoCreate = .T.
	Height = 450
	Name = "themedform"
	ShowInTaskBar = .F.
	sumeveniftitlebarisoff = .T.
	TitleBar = 0
	version = 3.5.7
	Width = 691
	windowflags = 0
	_memberdata = <VFPData>
		<memberdata name="windowflags" type="property" display="WindowFlags"/>
		<memberdata name="maketransparent" type="method" display="MakeTransparent"/>
		<memberdata name="makeopaque" type="method" display="MakeOpaque"/>
		<memberdata name="windowstate_assign" type="method" display="WindowState_Assign"/>
		<memberdata name="caption_assign" type="method" display="Caption_Assign"/>
		<memberdata name="sumeveniftitlebarisoff" type="property" display="SumEvenIfTitleBarIsOff"/>
		<memberdata name="version" type="property" display="Version"/>
		<memberdata name="fillentiredesktop" type="property" display="FillEntireDesktop"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cntFormSkin' AS cntform WITH ;
		Name = "cntFormSkin", ;
		cntClose.Name = "cntClose", ;
		cntClose.shpmousehandler.Name = "shpmousehandler", ;
		cntMaximize.Name = "cntMaximize", ;
		cntMaximize.shpmousehandler.Name = "shpmousehandler", ;
		cntMinimize.Name = "cntMinimize", ;
		cntMinimize.shpmousehandler.Name = "shpmousehandler", ;
		imgBackgroundLeft.Name = "imgBackgroundLeft", ;
		imgBackgroundMiddle.Name = "imgBackgroundMiddle", ;
		imgBackgroundRight.Name = "imgBackgroundRight", ;
		lblTitle.Name = "lblTitle", ;
		shpBackground.Name = "shpBackground"
		*< END OBJECT: ClassLib="ribbon.vcx" BaseClass="container" />

	ADD OBJECT 'cntUserControls' AS container WITH ;
		Anchor = 15, ;
		BackStyle = 0, ;
		BorderWidth = 0, ;
		Height = 416, ;
		Left = 0, ;
		Name = "cntUserControls", ;
		Top = 34, ;
		Width = 691
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'ScreenTip' AS screentip WITH ;
		Name = "ScreenTip", ;
		tmrHide.Name = "tmrHide", ;
		tmrShow.Name = "tmrShow"
		*< END OBJECT: ClassLib="screentip.vcx" BaseClass="control" />
	
	HIDDEN PROCEDURE caption_assign
		Lparameters vNewVal
		This.cntFormSkin.lblTitle.Caption = m.vNewVal
		This.Caption = m.vNewVal
	ENDPROC

	PROCEDURE Destroy
		This.MakeOpaque()
	ENDPROC

	PROCEDURE Init
		This.MakeTransparent()
	ENDPROC

	HIDDEN PROCEDURE makeopaque
		apiSetWindowLong(This.HWnd, GWL_EXSTYLE, This.WindowFlags) && Sets the original flags to the window
		apiSetLayeredWindowAttributes(This.HWnd, This.BackColor, 0, 0)
	ENDPROC

	HIDDEN PROCEDURE maketransparent
		Local lnFlags
		lnFlags = apiGetWindowLong(This.HWnd, GWL_EXSTYLE) && Gets the existing flags from the window
		This.WindowFlags = lnFlags
		lnFlags	= Bitor(lnFlags, WS_EX_LAYERED) && Appends the Layered flag to the existing ones
		apiSetWindowLong(This.HWnd, GWL_EXSTYLE, lnFlags) && Sets the new flags to the window
		apiSetLayeredWindowAttributes(This.HWnd, This.BackColor, 0, LWA_COLORKEY)
	ENDPROC

	HIDDEN PROCEDURE windowstate_assign
		Lparameters vNewVal
		If This.Desktop
		   If Not This.FillEntireDesktop
		      * Limit MaxHeight and MaxWidth to avoid covering Windows TaskBar.
		      This.MaxWidth = Sysmetric(21)
		      This.MaxHeight = Sysmetric(22) + Sysmetric(9)
		   Else
		      This.ResetToDefault("MaxHeight")
		      This.ResetToDefault("MaxWidth")
		   Endif
		Endif
		This.cntFormSkin.cntMaximize.WindowState = m.vNewVal
		This.WindowState = m.vNewVal
	ENDPROC

ENDDEFINE
